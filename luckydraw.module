<?php
/**
 * @file luckydraw.module
 *
 * The core implementation of luckydraw, it provides configuration UI, hooks for other luckydraw module to interacts,
 * define new type of luckydraw will be automatically loaded with given hooks / function naming rules.
 *
 * To implement the lucky draw feature, there are 3 entity types defined:
 *  - Lucky draw type:
 *    User can define more types of luckydraw, in this module we have implemented a wheel fortune, see luckydraw_wheel.
 *    No specific purpose, cannot add new fields.
 *  - Lucky draw:
 *    The entity contains the lucky draw settings, including basic display settings, allow specific type of lucky
 *    draw to extend the settings which saved in luckydraw's settings field as serialized value.
 *  - Lucky draw item
 *    The item in terms of each prize, the rate of hitting it when user play the lottery. It defines some basic fields,
 *    other module may also alter the settings form to extend. Values are saved in a serialized field in data of
 *    luckydraw_item table.
 */

/**
 * Intends to keep the module file smaller, the Controllers are created in separate files
 */

module_load_include('inc', 'luckydraw', 'includes/controllers/LuckyDrawController');
module_load_include('inc', 'luckydraw', 'includes/controllers/LuckyDrawItemController');
module_load_include('inc', 'luckydraw', 'includes/entities/LuckyDraw');
module_load_include('inc', 'luckydraw', 'includes/entities/LuckyDrawItem');

/**
 * Implements hook_entity_info().
 * @see
 *  https://www.drupal.org/node/878784
 */
function luckydraw_entity_info() {
  $entity['luckydraw_item'] = array(
    'label' => t('Luckydraw Item'),
    'entity class' => 'LuckyDrawItem',
    'controller class' => 'LuckyDrawItemController',
    'base table' => 'luckydraw_item',
    'entity keys' => array(
      'id' => 'liid',
      'label' => 'name',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'fieldable' => TRUE,
    'load hook' => 'luckydraw_item_load',
    'admin ui' => array(
      'path' => 'admin/content/luckydraws/manage',
      'controller class' => 'LuckyDrawItemUIController',
      'file' => 'includes/luckydraw_item.admin.inc',
      'menu wildcard' => '%luckydraw_item',
    ),
    'module' => 'luckydraw',
    'access callback' => 'luckydraw_access',
    'fieldable' => TRUE,
  );

  $entity['luckydraw'] = array(
    'label' => t('Luckdraw'),
    'entity class' => 'LuckyDraw',
    'controller class' => 'LuckyDrawController',
    'base table' => 'luckydraw',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'lid',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    //'bundle of' => 'luckydraw_item',
    'bundles' => array(),
    'creation callback' => 'luckydraw_create',
    'load hook' => 'luckydraw_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => TRUE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'luckydraw',
    'access callback' => 'luckydraw_access',
    'admin ui' => array(
      'path' => 'admin/content/luckydraws',
      'file' => 'includes/luckydraw.admin.inc',
      'controller class' => 'LuckyDrawUIController',
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_info_alter().
 * To let Drupal understands the entities of luckydraw_type are bundles of
 * luckydraw.
 */
function luckydraw_entity_info_alter(&$entity_info) {
  foreach (luckydraw_get_types() as $type => $info) {
    $entity_info['luckydraw']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/luckydraw-types/manage/%luckydraw_type',
        'real path' => 'admin/structure/luckydraw-types/manange/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_entity_property_info().
 * Provide metadata for entity properties, so they can be used in Rules data selector.
 */
function luckydraw_entity_property_info() {

  $properties = &$info['luckydraw']['properties'];

  $properties['lid'] = array(
    'label' => t('Luckydraw ID'),
    'description' => t('Serial numeric ID of the truncated luckydraw data in the local database.'),
    'type' => 'integer',
    'schema field' => 'lid',
  );
  $properties['name'] = array(
    'label' => t('Name'),
    'description' => t('The luckydraw name.'),
    'type' => 'text',
    'schema field' => 'name',
  );
  $properties['type'] = array(
    'label' => t('Luckydraw type'),
    'description' => t('The luckydraw type.'),
    'type' => 'text',
    'schema field' => 'type',
  );
  $properties['description'] = array(
    'label' => t('Description'),
    'description' => t('The luckydraw description.'),
    'type' => 'text',
    'schema field' => 'description',
  );

  // User entity.
  $properties['user'] = array(
    'label' => t('User'),
    'description' => t("Owner's user account."),
    'type' => 'user',
    'schema field' => 'uid',
  );

  $properties['settings'] = array(
    'label' => t('Settings'),
    'description' => t('The luckydraw settings.'),
    'type' => 'text',
    'schema field' => 'settings',
  );

  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('The Unix timestamp when the card data was first stored.'),
    'type' => 'date',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t('Changed'),
    'description' => t('The Unix timestamp when the card data was last updated.'),
    'type' => 'date',
    'schema field' => 'changed',
  );
  $properties['availability'] = array(
    'label' => t('Status'),
    'description' => t('The availability status of a luckydraw'),
    'type' => 'integer',
    'schema field' => 'status',
  );

  return $info;
}

/**
 * Implements hook_menu().
 * Add the menu items for luckydraw entity, most CRUD related.
 */
function luckydraw_menu() {
  $items = array();

  $items['luckydraw/process/js/%luckydraw'] = array(
    'title' => 'Luckydraw Process',
    'description' => 'Callback function to client to find the lucky prize.',
    'page callback' => 'luckydraw_process_js_get_result',
    'page arguments' => array(3),
    'access callback' => 'luckydraw_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function luckydraw_item_title_callback($op, $luckydraw, $luckydraw_item) {
  if ($op == 'add') {
    return t('Add %title item', array('%title' => $luckydraw->name));
  }
}

/**
 * Implements hook_access().
 * Define luckydraw entities access callback.
 */
function luckydraw_access($op, $luckydraw = NULL, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'create':
      return user_access('administer luckydraw entities', $account)
        || user_access('create luckydraw entities', $account);

    case 'view':
      return user_access('administer luckydraw entities', $account)
        || user_access('view luckydraw entities', $account);

    case 'edit':
      return user_access('administer luckydraw entities')
        || user_access('edit any luckydraw entities', $account);
  }

  return TRUE;
}

/**
 * Implements hook_permision().
 * Define luckydraw permissions.
 */
function luckydraw_permission() {
  return array(
    'administer luckydraw entities' => array(
      'title' => t('Administer luckydraw types'),
      'description' => t('Allow users to configure luckydraw types.'),
      'restrict access' => TRUE,
    ),
    'create luckydraw entities' => array(
      'title' => t('Create luckydarw item'),
      'description' => t('Allow users to create luckydraw items.'),
      'restrict access' => TRUE,
    ),
    'view luckydraw entities' => array(
      'title' => t('View luckydraw items'),
      'description' => t('Allow users to view luckydraw items.'),
      'restrict access' => FALSE,
    ),
    'edit any luckydraw entities' => array(
      'title' => t('Edit any luckydraw items'),
      'description' => t('Allows users to edit any luckydraw items.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function luckydraw_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'luckydraw_overview_form') {
    $form['add_link'] = array(
      '#markup' => '<ul class="action-links"><li>' . l(t('Add luckydraw'), 'admin/content/luckydraws/add') . '</li></ul>',
      '#weight' => -1,
    );
  }
}

/* luckydraw_type CRUD using entity api */

function luckydraw_type_load($type = NULL) {
  return luckydraw_get_types($type);
}

function luckydraw_get_types($type = NULL) {
  //$types = entity_load_multiple_by_name('luckydraw_type', isset($type_name) ? array($type_name) : FALSE);
  $types = luckydraw_types_list();
  if (empty($types)) {
    return array();
  }
  return isset($type) ? $types[$type] : $types;
}

function luckydraw_types_list() {
  $types = &drupal_static(__FUNCTION__);

  if (!isset($types)) {
    foreach (module_invoke_all('luckydraw_info') as $info) {
      $types[$info['type']] = (object) $info;
    }
  }

  return $types;
}

function luckydraw_type_save($luckydraw_type) {
  entity_save('luckydraw_type', $luckydraw_type);
}

function luckydraw_type_delete($luckydraw_type) {
  entity_delete('luckydraw_type', entity_id('luckydraw_type', $luckydraw_type));
}

/* luckydraw CRUD using entity api */

/**
 * Load a single luckydraw and its items
 */
function luckydraw_load($lid, $reset = FALSE) {
  $luckydraw_entities = luckydraw_load_multiple(array($lid), array(), $reset);
  return reset($luckydraw_entities);
}

/**
 * Luckydraw loads multiple by calling entity_load.
 *
 * @param array $lids
 * @param array $conditions
 * @param bool $reset
 * @return mixed
 */
function luckydraw_load_multiple($lids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('luckydraw', $lids, $conditions, $reset);
}

/**
 * Save luckydraw
 * @param object $luckydraw
 */
function luckydraw_save($luckydraw) {
  entity_save('luckydraw', $luckydraw);
}

/**
 * Delete luckydraw and its items
 *
 * @param object $luckydraw
 */
function luckydraw_delete($luckydraw) {
  entity_delete('luckydraw', entity_id('luckydraw', $luckydraw));
  luckydraw_items_delete_by_luckydraw_id($luckydraw->lid);
}

/* luckydraw_item CRUD using entity api */

/**
 * Load a single luckydraw item
 *
 * @param $liid
 *  Luckydraw item identifier
 * @param bool $reset
 * @return object
 *  single luckydraw item
 */
function luckydraw_item_load($liid, $reset = FALSE) {
  $items = luckydraw_item_load_multiple(array($liid), array(), $reset);
  return reset($items);
}

/**
 * Load multiple luckydraw items
 *
 * @param array $liids
 * @param array $conditions
 * @param bool $reset
 * @return mixed
 */
function luckydraw_item_load_multiple($liids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('luckydraw_item', $liids, $conditions, $reset);
}

/**
 * Save a luckydraw item
 *
 * @param object $luckydraw_item
 */
function luckydraw_item_save($luckydraw_item) {
  entity_save('luckydraw_item', $luckydraw_item);
}

/**
 * Delete a single luckydraw item
 *
 * @param object $luckydraw_item
 */
function luckydraw_item_delete($luckydraw_item) {
  entity_delete('luckydraw_item', entity_id('luckydraw_item', $luckydraw_item));
}

/**
 * Save a luckydraw item
 *
 * @param array $values
 * @return object
 *  Created luckydraw item
 */
function luckydraw_item_create($values = array()) {
  return entity_get_controller('luckydraw_item')->create($values);
}

/**
 * Load a bunch of luckydraw items with provided luckydraw id
 * @param $luckydraw
 *  Luckydraw object
 */
function luckydraw_load_items($luckydraw) {
  $luckydraw->items = array();

  $result = db_select('luckydraw_item', 'i')
    ->fields('i')
    ->condition('i.lid', $luckydraw->lid)
    ->execute();

  while($item = $result->fetchAssoc()) {
    $item['data'] = unserialize($item['data']);
    $luckydraw->items[$item['liid']] = (object) $item;
  }

  // Sort by weight, but we need to keep the index as they are item id
  uasort($luckydraw->items, function($a, $b) {
    return $a->weight - $b->weight;
  });
}

/**
 * Delete a list of items with provided luckydraw id
 * @param int $lid
 *  Luckydraw identifier
 */
function luckydraw_items_delete_by_luckydraw_id($lid) {
  db_delete('luckydraw_item')
    ->condition('lid', $lid)
    ->execute();
}

/**
 * Save Luckydraw
 * @param array $values
 * @return object luckydraw
 */
function luckydraw_create($values = array()) {
  return entity_get_controller('luckydraw')->create($values);
}

/**
 * View luckydraw
 * @param object $luckydraw
 * @return html
 */
function luckydraw_page_view($luckydraw) {
  global $user;

  if ($luckydraw->status == 0
    && $user->uid != 1
    && !user_access('administer luckydraw entities', $user)) {
    
    return drupal_not_found();
  }

  luckydraw_load_items($luckydraw);
  return luckydraw_render($luckydraw);
}

/**
 * Implements hook_theme()
 */
function luckydraw_theme() {
  return array(
    'luckydraw_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/luckydraw.admin.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 *
 * @return array
 */
function luckydraw_block_info() {
  $blocks = array();

  $luckydraws = luckydraw_load_multiple(FALSE);

  foreach ($luckydraws as $luckydraw) {
    if (isset($luckydraw->settings['create_block'])) {
      $blocks['luckydraw-' . $luckydraw->lid] = array(
        'info' => 'Lucky draw: ' . $luckydraw->name,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param $delta
 * @return array
 */
function luckydraw_block_view($delta = '') {
  $block = array();

  if (strpos($delta, 'luckydraw-') === 0 ) {
    $temp = explode('-', $delta);
    if (isset($temp[1]) && is_numeric($temp[1])) {
      $luckydraw = luckydraw_load($temp[1]);

      $block['content'] = luckydraw_page_view($luckydraw);
    }
  }

  return $block;
}

/**
 * Render luckydraw in the end
 * This function provides a HOOK_luckydraw_pre_render($luckydraw)
 * to allow other module to define the theme.
 * @param $luckydraw
 *  Luckydraw object
 * @return html output
 */
function luckydraw_render($luckydraw) {

  if (empty($luckydraw->items)) {
    return t('The luckydraw is not available yet.');
  }
  drupal_add_js(drupal_get_path('module', 'luckydraw') . '/luckydraw.js', 'file');
  drupal_add_js(array('luckydraw' => array('items' => $luckydraw->items)), 'setting');

  $render = array();

  // Provide a hook for other modules to alter the render
//  foreach (module_implements('luckydraw_pre_render') as $module) {
//    $render += call_user_func($module . '_luckydraw_pre_render', $luckydraw);
//  }
//
  $render = module_invoke_all('luckydraw_pre_render', $luckydraw);

  if (isset($render['theme'])) {
    return theme($render['theme'], $render['variables']);
  }
  else {
    return $render;
  }
}

/**
 * Shuffle and pick the prize items.
 * This function firstly fill up an empty array with the prize item's ID with its "Rate" size,
 * and shuffle function to mess up the items, then call array_rand to pick one item from the total.
 *
 * @param $items_config
 *  The items configurations originally set, which are not only including prize, but also settings of each prize
 * @return array
 *  A list of shuffled items data
 */
function luckydraw_shuffle_rand($items_config) {
  $items = array();
  $start_index = 0;
  foreach ($items_config as $item) {
    $items = array_merge($items, array_fill($start_index, $item->data['rate'], $item->liid));
    $start_index += $item->data['rate'];
  }

  // Shuffle the items
  shuffle($items);

  $selected = $items[array_rand($items)];
  return $selected;
}

/**
 * Luckydraw play to get the result
 *
 * @param object $luckydraw
 * @return json
 *   Json formatted result
 */
function luckydraw_process_js_get_result($luckydraw) {
  global $user;

  // Array contains information sent to client
  $variables = array();

  if (!isset($_REQUEST['submitted'])) {

    // Add items to luckydraw items
    luckydraw_load_items($luckydraw);

    // Provides a validate hook to let other module to
    // The hook must return a state for continuing playing, otherwise will stop
    luckydraw_process_validate($luckydraw, $user);

    if ($errors = luckydraw_get_errors()) {
      $variables += array('result' => $errors, 'status' => 'error');
    } else {
      // Shuffle
      $luckydraw_item_id = luckydraw_shuffle_rand($luckydraw->items);

      // Save the result into local db
      luckydraw_save_transaction($luckydraw, $user, $luckydraw_item_id);

      $variables += array('result' => $luckydraw->items[$luckydraw_item_id], 'status' => 'ok');

      // Provides the last phase for other module to alter the result
      // for example, luckydraw_commerce module might alter the result by attaching
      // a add to cart form for user to get the reward and complete the addressee information
      foreach (module_implements('luckydraw_process_delivery_alter') as $module) {
        $function = $module . '_luckydraw_process_delivery_alter';
        if (function_exists($function)) {
          $function($variables, $luckydraw, $user, $luckydraw_item_id);
        }
      }
    }
  }

  drupal_json_output($variables);
//  exit;
}

/**
 * Validate before playing
 *
 * @param $luckydraw
 * @param $account
 */
function luckydraw_process_validate($luckydraw, $account) {
  foreach (module_implements('luckydraw_process_validate') as $module) {
    $function = $module . '_luckydraw_process_validate';

    if (function_exists($function)) {
      $function($luckydraw, $account);
    }
  }

}

/**
 * Save the luckydraw play result into local db
 *
 * @param $luckydraw
 * @param $account
 * @param $luckydraw_item_id
 */
function luckydraw_save_transaction($luckydraw, $account, $luckydraw_item_id) {

  if (isset($_REQUEST['submitted'])) {
    return;
  }
  // Insert a transaction into local db
  db_insert('luckydraw_transactions')
    ->fields(array(
      'uid' => $account->uid,
      'lid' => $luckydraw->lid,
      'liid' => $luckydraw_item_id,
      'created' => REQUEST_TIME,
    ))->execute();


  // Allow other modules to do something after saving the transaction
  // Such as, it will cost points for a user to play the draw
  module_invoke_all('luckydraw_save_transaction', $luckydraw, $account, $luckydraw_item_id);
}

/**
 * Load luckydraw transactions of a luckydraw, if uid is provided, will return that user's
 *
 * @param $luckydraw
 * @param null $uid
 * @return array
 */
function luckydraw_transactions_load($luckydraw, $uid = NULL) {
  $query = db_select('luckydraw_transactions', 't');
  $query->join('luckydraw_item', 'i', 't.liid = i.liid');
  $query->fields('i', array('name', 'data'));
  $query->fields('t', array('uid', 'created', 'liid'));
  $query->condition('t.lid', $luckydraw->lid);

  if ($uid) {
    $query->condition('t.uid', $uid);
  }

  $result = $query->execute();

  $records = array();
  while ($record = $result->fetchAssoc()) {
    $record['data'] = unserialize($record['data']);
    $records[] = $record;
  }

  return $records;
}

/**
 * Set error on validation
 * @param $message
 */
function luckydraw_set_error($message) {
  if (!in_array($message, $_SESSION['errors'])) {
    $_SESSION['errors'][] = $message;
  }
}

/**
 * Get errors
 *
 * @return bool
 */
function luckydraw_get_errors() {
  if (isset($_SESSION['errors'])) {
    $errors = $_SESSION['errors'];
    unset($_SESSION['errors']);

    return $errors;
  }
  return FALSE;
}