<?php
/**
 * @file luckydraw.module
 *
 * The core implementation of luckydraw, it provides configuration UI, hooks for other luckydraw module to interacts,
 * define new type of luckydraw will be automatically loaded with given hooks / function naming rules.
 *
 * To implement the lucky draw feature, there are 3 entity types defined:
 *  - Lucky draw type:
 *    User can define more types of luckydraw, in this module we have implemented a wheel fortune, see luckydraw_wheel.
 *    No specific purpose, cannot add new fields.
 *  - Lucky draw:
 *    The entity contains the lucky draw settings, including basic display settings, allow specific type of lucky
 *    draw to extend the settings which saved in luckydraw's settings field as serialized value.
 *  - Lucky draw item
 *    The item in terms of each prize, the rate of hitting it when user play the lottery. It defines some basic fields,
 *    other module may also alter the settings form to extend. Values are saved in a serialized field in data of
 *    luckydraw_item table.
 */

/**
 * Intends to keep the module file smaller, the Controllers are created in separate files
 */

module_load_include('inc', 'luckydraw', 'includes/controllers/LuckyDrawController');
module_load_include('inc', 'luckydraw', 'includes/controllers/LuckyDrawTypeController');
module_load_include('inc', 'luckydraw', 'includes/controllers/LuckyDrawItemController');
module_load_include('inc', 'luckydraw', 'includes/entities/LuckyDraw');
module_load_include('inc', 'luckydraw', 'includes/entities/LuckyDrawType');
module_load_include('inc', 'luckydraw', 'includes/entities/LuckyDrawItem');

/**
 * Implements hook_entity_info().
 * @see
 *  https://www.drupal.org/node/878784
 */
function luckydraw_entity_info() {
  $entity['luckydraw_item'] = array(
    'label' => t('Luckydraw Item'),
    'entity class' => 'LuckyDrawItem',
    'controller class' => 'LuckyDrawItemController',
    'base table' => 'luckydraw_item',
    'entity keys' => array(
      'id' => 'liid',
      'label' => 'name',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'fieldable' => TRUE,
    'load hook' => 'luckydraw_item_load',
    'admin ui' => array(
      'path' => 'admin/content/luckydraws/manage',
      'controller class' => 'LuckyDrawItemUIController',
      'file' => 'includes/luckydraw_item.admin.inc',
      'menu wildcard' => '%luckydraw_item',
    ),
    'module' => 'luckydraw',
    'access callback' => 'luckydraw_access',
    'fieldable' => TRUE,
  );

  $entity['luckydraw'] = array(
    'label' => t('Luckdraw entity'),
    'entity class' => 'LuckyDraw',
    'controller class' => 'LuckyDrawController',
    'base table' => 'luckydraw',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'lid',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    //'bundle of' => 'luckydraw_item',
    'bundles' => array(),
    'creation callback' => 'luckydraw_create',
    'load hook' => 'luckydraw_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => TRUE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'luckydraw',
    'access callback' => 'luckydraw_access',
    'admin ui' => array(
      'path' => 'admin/content/luckydraws',
      'file' => 'includes/luckydraw.admin.inc',
      'controller class' => 'LuckyDrawUIController',
    ),
  );

  $entity['luckydraw_type'] = array(
    'label' => t('Luckydraw Type'),
    'entity class' => 'LuckyDrawType',
    'controller class' => 'LuckyDrawTypeController',
    'base table' => 'luckydraw_type',
    'fieldable' => FALSE,
    'bundle of' => 'luckydraw',
    'bundles' => array(),
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'name',
    ),
    'module' => 'luckydraw',
    'admin ui' => array(
      'path' => 'admin/structure/luckydraw-types',
      'menu wildcard' => '%luckydraw_type',
      'file' => 'includes/luckydraw_type.admin.inc',
      'controller class' => 'LuckyDrawTypeUIController',
    ),
    'access callback' => 'luckydraw_access',
  );

  return $entity;
}

/**
 * Implements hook_entity_info_alter().
 * To let Drupal understands the entities of luckydraw_type are bundles of
 * luckydraw.
 */
function luckydraw_entity_info_alter(&$entity_info) {
  foreach (luckydraw_get_types() as $type => $info) {
    $entity_info['luckydraw']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/luckydraw-types/manage/%luckydraw_type',
        'real path' => 'admin/structure/luckydraw-types/manange/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_entity_property_info().
 * Provide metadata for entity properties, so they can be used in Rules data selector.
 */
function luckydraw_entity_property_info() {

  $properties = &$info['luckydraw']['properties'];

  $properties['lid'] = array(
    'label' => t('Luckydraw ID'),
    'description' => t('Serial numeric ID of the truncated luckydraw data in the local database.'),
    'type' => 'integer',
    'schema field' => 'lid',
  );
  $properties['name'] = array(
    'label' => t('Name'),
    'description' => t('The luckydraw name.'),
    'type' => 'text',
    'schema field' => 'name',
  );
  $properties['type'] = array(
    'label' => t('Luckydraw type'),
    'description' => t('The luckydraw type.'),
    'type' => 'text',
    'schema field' => 'type',
  );
  $properties['description'] = array(
    'label' => t('Description'),
    'description' => t('The luckydraw description.'),
    'type' => 'text',
    'schema field' => 'description',
  );

  // User entity.
  $properties['user'] = array(
    'label' => t('User'),
    'description' => t("Owner's user account."),
    'type' => 'user',
    'schema field' => 'uid',
  );

  $properties['settings'] = array(
    'label' => t('Settings'),
    'description' => t('The luckydraw settings.'),
    'type' => 'text',
    'schema field' => 'settings',
  );

  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('The Unix timestamp when the card data was first stored.'),
    'type' => 'date',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t('Changed'),
    'description' => t('The Unix timestamp when the card data was last updated.'),
    'type' => 'date',
    'schema field' => 'changed',
  );

  return $info;
}

function luckydraw_token_info() {
  $types = array(
    'luckydraw' => array(
      'name' => t('Luckydraw entity'),
      'description' => t('A single luckydraw entity'),
      'needs-data' => 'luckydraw',
    ),
  );

  $tokens['luckydraw']['lid'] = array(
    'type' => 'integer',
    'name' => t('Luckydraw entity identifier'),
    'description' => t('Luckydraw entity identifier'),
  );

  return array(
    'types' => $types,
    'tokens' => $tokens,
  );
}

/**
 * Implements hook_menu().
 * Add the menu items for luckydraw entity, most CRUD related.
 */
function luckydraw_menu() {
  $items = array();

  $items['luckydraw/process/js/%luckydraw'] = array(
    'title' => 'Luckydraw Process',
    'description' => 'Callback function to client to find the lucky prize.',
    'page callback' => 'luckydraw_process_js_get_result',
    'page arguments' => array(3),
    'access callback' => 'luckydraw_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function luckydraw_item_title_callback($op, $luckydraw, $luckydraw_item) {
  if ($op == 'add') {
    return t('Add %title item', array('%title' => $luckydraw->name));
  }
}

/**
 * Implements hook_access().
 * Define luckydraw entities access callback.
 */
function luckydraw_access($op, $luckydraw = NULL, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'create':
      return user_access('administer luckydraw entities', $account)
        || user_access('create luckydraw entities', $account);

    case 'view':
      return user_access('administer luckydraw entities', $account)
        || user_access('view luckydraw entities', $account);

    case 'edit':
      return user_access('administer luckydraw entities')
        || user_access('edit any luckydraw entities', $account);
  }

  return TRUE;
}

/**
 * Implements hook_permision().
 * Define luckydraw permissions.
 */
function luckydraw_permission() {
  return array(
    'administer luckydraw entities' => array(
      'title' => t('Adminster luckydraw types'),
      'description' => t('Allow users to configure luckydraw types.'),
      'restrict access' => TRUE,
    ),
    'create luckydraw entities' => array(
      'title' => t('Create luckydarw item'),
      'description' => t('Allow users to create luckydraw items.'),
      'restrict access' => TRUE,
    ),
    'view luckydraw entities' => array(
      'title' => t('View luckydraw items'),
      'description' => t('Allow users to view luckydraw items.'),
      'restrict access' => TRUE,
    ),
    'edit any luckydraw entities' => array(
      'title' => t('Edit any luckydraw items'),
      'description' => t('Allows users to edit any luckydraw items.'),
      'restrict access' => TRUE,
    ),
  );
}

/* luckydraw_type CRUD using entity api */

function luckydraw_type_load($type_name) {
  return luckydraw_get_types($type_name);
}

function luckydraw_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('luckydraw_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

function luckydraw_type_save($luckydraw_type) {
  entity_save('luckydraw_type', $luckydraw_type);
}

function luckydraw_type_delete($luckydraw_type) {
  entity_delete('luckydraw_type', entity_id('luckydraw_type', $luckydraw_type));
}

/* luckydraw CRUD using entity api */

/**
 * Load a single luckydraw and its items
 */
function luckydraw_load($lid, $reset = FALSE) {
  $luckydraw_entities = luckydraw_load_multiple(array($lid), array(), $reset);
  return reset($luckydraw_entities);
}

/**
 * Luckydraw loads multiple by calling entity_load.
 *
 * @param array $lids
 * @param array $conditions
 * @param bool $reset
 * @return mixed
 */
function luckydraw_load_multiple($lids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('luckydraw', $lids, $conditions, $reset);
}

/**
 * Save luckydraw
 * @param object $luckydraw
 */
function luckydraw_save($luckydraw) {
  entity_save('luckydraw', $luckydraw);
}

/**
 * Delete luckydraw and its items
 *
 * @param object $luckydraw
 */
function luckydraw_delete($luckydraw) {
  entity_delete('luckydraw', entity_id('luckydraw', $luckydraw));
  luckydraw_items_delete_by_luckydraw_id($luckydraw->id);
}

/* luckydraw_item CRUD using entity api */

/**
 * Load a single luckydraw item
 *
 * @param $liid
 *  Luckydraw item identifier
 * @param bool $reset
 * @return object
 *  single luckydraw item
 */
function luckydraw_item_load($liid, $reset = FALSE) {
  $items = luckydraw_item_load_multiple(array($liid), array(), $reset);
  return reset($items);
}

/**
 * Load multiple luckydraw items
 *
 * @param array $liids
 * @param array $conditions
 * @param bool $reset
 * @return mixed
 */
function luckydraw_item_load_multiple($liids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('luckydraw_item', $liids, $conditions, $reset);
}

/**
 * Save a luckydraw item
 *
 * @param object $luckydraw_item
 */
function luckydraw_item_save($luckydraw_item) {
  entity_save('luckydraw_item', $luckydraw_item);
}

/**
 * Delete a single luckydraw item
 *
 * @param object $luckydraw_item
 */
function luckydraw_item_delete($luckydraw_item) {
  entity_delete('luckydraw_item', entity_id('luckydraw_item', $luckydraw_item));
}

/**
 * Save a luckydraw item
 *
 * @param array $values
 * @return object
 *  Created luckydraw item
 */
function luckydraw_item_create($values = array()) {
  return entity_get_controller('luckydraw_item')->create($values);
}

/**
 * Load a bunch of luckydraw items with provided luckydraw id
 * @param $luckydraw
 *  Luckydraw object
 */
function luckydraw_load_items($luckydraw) {
  $luckydraw->items = array();

  $result = db_select('luckydraw_item', 'i')
    ->fields('i')
    ->condition('i.lid', $luckydraw->lid)
    ->execute();

  while($item = $result->fetchAssoc()) {
    $item['data'] = unserialize($item['data']);
    $luckydraw->items[$item['liid']] = (object) $item;
  }
}

/**
 * Delete a list of items with provided luckydraw id
 * @param int $lid
 *  Luckydraw identifier
 */
function luckydraw_items_delete_by_luckydraw_id($lid) {}

/**
 * Save Luckydraw
 * @param array $values
 * @return object luckydraw
 */
function luckydraw_create($values = array()) {
  return entity_get_controller('luckydraw')->create($values);
}

/**
 * View luckydraw
 * @param object $luckydraw
 * @return html
 */
function luckydraw_page_view($luckydraw) {
  luckydraw_load_items($luckydraw);
  return luckydraw_render($luckydraw);
}

/**
 * Implements hook_theme()
 */
function luckydraw_theme() {
  return array(
    'luckydraw_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/luckydraw.admin.inc',
    ),
  );
}

/**
 * Render luckydraw in the end
 * This function provides a HOOK_luckydraw_pre_render($luckydraw)
 * to allow other module to define the theme.
 * @param $luckydraw
 *  Luckydraw object
 * @return html output
 */
function luckydraw_render($luckydraw) {
  // Provide a hook for other modules to alter the render
  $render = module_invoke_all('luckydraw_pre_render', $luckydraw);

  if (isset($render['theme'])) {
    return theme($render['theme'], $render['variables']);
  }
  else {
    return $render;
  }
}

/**
 * Shuffle and pick the prize items.
 * This function firstly fill up an empty array with the prize item's ID with its "Rate" size,
 * and shuffle function to mess up the items, then call array_rand to pick one item from the total.
 *
 * @param $items_config
 *  The items configurations originally set, which are not only including prize, but also settings of each prize
 * @return array
 *  A list of shuffled items data
 */
function luckydraw_shuffle_rand($items_config) {
  $items = array();
  $start_index = 0;
  foreach ($items_config as $item) {
    $items = array_merge($items, array_fill($start_index, $item->data['rate'], $item->liid));
    $start_index += $item->data['rate'];
  }

  // Shuffle the items
  shuffle($items);

  return $items[array_rand($items)];
}

/**
 * Luckydraw play to get the result
 *
 * @param object $luckydraw
 * @return json
 *   Json formatted result
 */
function luckydraw_process_js_get_result($luckydraw) {
  global $user;

  luckydraw_load_items($luckydraw);
  $result = luckydraw_shuffle_rand($luckydraw->items);

  // If rules module enabled
  if (module_exists('rules')) {
    $rules_event_name = isset($luckydraw->items[$result]->lose) ?
      'luckydraw_user_drawn_no_prize' : 'luckydraw_user_won_a_prize';

    rules_invoke_event($rules_event_name, $user, $luckydraw, $result);
  }

  drupal_json_output(array('result' => $luckydraw->items[$result], 'status' => 'ok'));
  exit;
}